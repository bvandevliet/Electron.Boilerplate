/**
 * In this file you can include the rest of your app's specific main process code.
 * You can also put them in separate files and import them here.
 */

import { BrowserWindow, Menu, Tray, app, dialog } from 'electron';
import path from 'path';

// eslint-disable-next-line @typescript-eslint/no-var-requires
const favicon = path.resolve(__dirname, require('./favicon.ico'));

// Force locale since external tools may reference it.
app.commandLine.appendSwitch('lang', 'en-US');

// Disable the disk cache for HTTP requests.
app.commandLine.appendSwitch('disable-http-cache', 'true');

// Ignore certificate related errors.
app.commandLine.appendSwitch('ignore-certificate-errors', 'true');

// Enable garbage collection to be triggered manually.
app.commandLine.appendSwitch('js-flags', '--expose-gc');

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// The tray icon and browser window globals.
let tray: Tray;
let mainWindow: BrowserWindow;

// Indicates whether to quit the application or to hide the browser window.
// eslint-disable-next-line prefer-const
let doQuit = false;

/**
 * Properly quits the application.
 */
const quitApplication = () =>
{
  // Remove the tray icon.
  tray?.destroy();

  // Allows the main window to close instead of being minimized to the tray.
  doQuit = true;

  // Eventually triggers "window-all-closed".
  BrowserWindow.getAllWindows().forEach(appWindow => appWindow.close());
};

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { app.quit(); }

// Quit app when all windows are closed.
app.on('window-all-closed', () => app.quit());

/**
 * The template for the tray menu.
 */
const trayMenu = Menu.buildFromTemplate([
  {
    label: 'Exit',
    // Role: 'quit',
    click: quitApplication,
  },
]);

/**
 * The template for the application menu.
 */
const appMenu = Menu.buildFromTemplate([
  {
    label: 'File',
    submenu: [
      {
        label: 'Exit',
        // Role: 'quit',
        click: quitApplication,
      },
    ],
  },
  {
    label: 'Edit',
    role: 'editMenu',
  },
  {
    label: 'View',
    role: 'viewMenu',
  },
  {
    label: 'Window',
    role: 'windowMenu',
  },
  {
    label: 'About',
    click: () =>
    {
      dialog.showMessageBox(null, {
        type: 'info',
        title: `About ${app.name}`,
        message: ''
          + `\n${app.name}  v${app.getVersion()}`
          + `\nElectron.js  v${process.versions.electron}`
          + `\nNode.js  v${process.versions.node}`
          + `\nChromium  v${process.versions.chrome}`,
      });
    },
  },
]);

/**
 * Creates the main browser window.
 *
 * @link https://www.electronjs.org/docs/latest/tutorial/quick-start
 */
const createWindow = (): void =>
{
  // Don't re-create if already exists.
  if (mainWindow instanceof BrowserWindow) { return; }

  // Create the browser window.
  mainWindow = new BrowserWindow({
    show: false, // @see 'ready-to-show' event
    autoHideMenuBar: true,
    minWidth: 768,
    minHeight: 768,
    icon: favicon,
    webPreferences: {
      spellcheck: false,
      devTools: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

    // Update tray tooltip when the window document title changes.
    .on('page-title-updated', (e, title) =>
      tray.setToolTip(title))

    // Show the window when the page has been rendered, to prevent a visual flash.
    .once('ready-to-show', () =>
      // Triggers "show".
      mainWindow.show())

    // Maximize the browser window.
    .once('show', () =>
      mainWindow.maximize())

    // Handle the window's close event.
    .on('close', e =>
    {
      if (!doQuit)
      {
        e.preventDefault();
        mainWindow.hide();
      }
    });

  // Load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools for non-production instances.
  process.env.NODE_ENV === 'production' || mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
// app.once('ready', () =>
app.whenReady().then(() =>
{
  // Create the tray icon.
  tray = new Tray(favicon);

  // Set the tray menu.
  tray.setContextMenu(trayMenu);

  // Set the application menu.
  Menu.setApplicationMenu(appMenu);

  // Create the main browser window.
  createWindow();

  // Show/hide window support.
  tray.on('click', () => mainWindow.isVisible() ? mainWindow.hide() : mainWindow.show());
});